# Домашнее задание к занятию «Абстрактные классы и интерфейсы»

## Цель задания

1. Использовать абстрактные классы для более корректного описания классов.
2. Применить и реализовать интерфейсы.
3. Ещё раз попрактиковаться с полиморфизмом.

------

## Инструкция по выполнению домашнего задания

В этом курсе рекомендуем вам использовать среду разработки Giga IDE и систему контроля версий GitVerse или GitHub (если знакомы с этим инструментом или находитесь не на территории РФ):

- [инструкция по установке Giga IDE](https://gitverse.ru/netology/Instructions/content/master/GigaIDE/installation.md).
- [загрузка файлов на GitVerse](https://github.com/netology-code/java-homeworks/blob/java-43/GITVERSE.md)
- [загрузка файлов на GitHub](https://github.com/netology-code/java-homeworks/blob/java-43/GITHUB.md)
  
В Giga IDE создавайте проекты и пишите код. В GitVerse/GitHub загружайте файлы.
Чтобы сдать задание на проверку, загрузите .java файл на GitVerse/GitHub и прикрепите ссылку в личном кабинете.

### Чтобы скачать/открыть файлы проекта:

- нажмите правой кнопкой мыши на файлы проекта в Giga IDE
- выберите "Открыть по адресу"
- нажмите на "Средство поиска"

Вы откроете папку с файлами проекта, которые можно приложить в личном кабинете или загрузить на GitHub или GitVerse.

------

## Задание 1 (обязательное)

Создайте систему классов для описания двух видов счетов:

1. **SimpleAccount** — обычный счёт, с которого можно платить, пока на нём есть деньги, и пополнять сколько угодно раз.
2. **CreditAccount** — кредитный счёт, который может уходить в минус до кредитного лимита, указанного в конструкторе, но не может уходить в плюс.

Оба счёта логично сделать наследниками общего класса `Account`.

У любого счёта должно быть три операции. Никакая из трёх операций ничего не должна выводить на экран:

* `boolean add(long amount)` — пополнение счёта на `amount`, возвращает `true`, если пополнение успешно, и `false`, если иначе;
* `boolean pay(long amount)` — покупка со счёта на `amount`, возвращает `true`, если пукупка успешна, и `false`, если иначе;
* `boolean transfer(Account account, long amount)` — перевод денег со счёта, у которого был вызван метод, на счёт из параметра на сумму в размере `amount`, возвращает `true`, если пополнение успешно, и `false`, если иначе;
* `long getBalance()` — метод возвращает текущий баланс на счёте.

Мы советуем реализовать операцию `transfer` как комбинацию из двух других операций.

## Задание 2 (обязательное)

Перед вами интерфейс `Logger`, описывающий объекты, умеющие логировать, т. е. журналировать сообщения из программы. В нашем случае журналом будет консоль:

```java
public interface Logger {
    void log(String msg);
}
```

Напишите две реализации этого интерфейса: `SimpleLogger` и `SmartLogger`.

Логгер типа `SimpleLogger` при вызове метода `log` должен выводить на экран текст вида: `[2022-12-17T19:04:28.907390] <сообщение>`, где в квадратных скобках указаны точная дата и время вызова метода. Его можно получить с помощью `LocalDateTime.now()`, возвращённый этой командой объект можно напрямую склеивать с текстом через `+`.

Логгер типа `SmartLogger` должен иметь текст вида `INFO#13 [2022-12-17T19:04:28.907390] <сообщение>`. Вместо `13` следует указать порядковый номер вызова метода `log` у этого логгера (нумеровать с 1). В случае, если в сообщении есть слово `error` (всё равно в каком регистре), то `INFO` следует заменить на `ERROR`.

------

## Критерии оценки

1. Программа запускается и отрабатывает без ошибок.
2. Программа соответствует всем требованиям из условия задачи.
3. Программа работает правильно на всех примерах из условия.
4. Программный код отформатирован и соответствует пройденным требованиям к качеству кода.
5. Каждая задача размещена в своём репозитории (гитвёрс-проекте)
6. Программа спроектирована достаточно логично и правильно, не противоречит общепринятым практикам и традициям.
7. Программа реализована только с использованием пройденных интсрументов и не содержит в себе побочного не упомянутого в условии функционала.
8. Каждая задача сделана в своём отдельном репозитории (gitverse-проекте).
